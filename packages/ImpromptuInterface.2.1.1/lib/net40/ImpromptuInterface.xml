<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ImpromptuInterface</name>
    </assembly>
    <members>
        <member name="T:ImpromptuInterface.Build.IActLikeProxyInitialize">
            <summary>
            This interface can be used to define your own custom proxy if you preload it.
            </summary>
            <remarks>
            Advanced usage only! This is required as well as <see cref="T:ImpromptuInterface.Build.ActLikeProxyAttribute"></see>
            </remarks>
        </member>
        <member name="T:ImpromptuInterface.IActLikeProxy">
            <summary>
            This interface can be used to access the original content of your emitted type;
            </summary>
        </member>
        <member name="P:ImpromptuInterface.IActLikeProxy.Original">
            <summary>
             Returns the proxied object
            </summary>
        </member>
        <member name="M:ImpromptuInterface.Build.IActLikeProxyInitialize.Initialize(System.Object,System.Collections.Generic.IEnumerable{System.Type},System.Collections.Generic.IDictionary{System.String,System.Type})">
            <summary>
             Method used to Initialize Proxy
            </summary>
            <param name="original"></param>
            <param name="interfaces"></param>
            <param name="informalInterface"></param>
        </member>
        <member name="T:ImpromptuInterface.Build.ActLikeProxy">
            <summary>
            Base class of Emited Proxies
            </summary>
        </member>
        <member name="M:ImpromptuInterface.Build.ActLikeProxy.Initialize(System.Object,System.Collections.Generic.IEnumerable{System.Type},System.Collections.Generic.IDictionary{System.String,System.Type})">
            <summary>
            Method used to Initialize Proxy
            </summary>
            <param name="original"></param>
            <param name="interfaces"></param>
            <param name="informalInterface"></param>
        </member>
        <member name="M:ImpromptuInterface.Build.ActLikeProxy.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ImpromptuInterface.Build.ActLikeProxy.Equals(ImpromptuInterface.Build.ActLikeProxy)">
            <summary>
            Actlike proxy should be equivalent to the objects they proxy
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:ImpromptuInterface.Build.ActLikeProxy.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:ImpromptuInterface.Build.ActLikeProxy.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:ImpromptuInterface.Build.ActLikeProxy.Original">
            <summary>
            Returns the proxied object
            </summary>
            <value></value>
        </member>
        <member name="T:ImpromptuInterface.Build.ActLikeProxyAttribute">
            <summary>
            Meta info describing proxy usage. Can be used to preload proxy.
            </summary>
        </member>
        <member name="M:ImpromptuInterface.Build.ActLikeProxyAttribute.#ctor(System.Type[],System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ImpromptuInterface.Build.ActLikeProxyAttribute"/> class.
            </summary>
            <param name="interfaces">The interfaces.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:ImpromptuInterface.Build.ActLikeProxyAttribute.Interfaces">
            <summary>
            Gets or sets the interfaces.
            </summary>
            <value>The interfaces.</value>
        </member>
        <member name="P:ImpromptuInterface.Build.ActLikeProxyAttribute.Context">
            <summary>
            Gets or sets the context.
            </summary>
            <value>The context.</value>
        </member>
        <member name="T:ImpromptuInterface.Dynamic.ImpromptuFactory">
            <summary>
            Base Class for making a fluent factory using an Impromptu Interface return type.
            </summary>
        </member>
        <member name="T:ImpromptuInterface.Dynamic.ImpromptuObject">
            <summary>
            Dynamic Object that knows about the Impromtu Interface return types;
            Override Typical Dynamic Object methods, and use TypeForName to get the return type of an interface member.
            </summary>
        </member>
        <member name="T:ImpromptuInterface.Dynamic.IDynamicKnowLike">
            <summary>
            This interface can be used on your custom dynamic objects if you want to know the interface you are impromptu-ly implementing.
            </summary>
        </member>
        <member name="P:ImpromptuInterface.Dynamic.IDynamicKnowLike.KnownInterfaces">
            <summary>
             Property used to pass interface information to proxied object
            </summary>
        </member>
        <member name="P:ImpromptuInterface.Dynamic.IDynamicKnowLike.KnownPropertySpec">
            <summary>
            Sets the known property spec.
            </summary>
            <value>The known property spec.</value>
        </member>
        <member name="T:ImpromptuInterface.Dynamic.IActLike">
            <summary>
            This interface can be used on your custom dynamic objects if you want impromptu interfaces without casting to object or using the static method syntax of ActLike.
            Also if you want to change the behavior for slightly for specific types as this will take precident when using the dynamic keyword or your specific type is known staticly.
            </summary>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.IActLike.ActLike``1(System.Type[])">
             <summary>
             This interface can be used on your custom dynamic objects if you want impromptu interfaces without casting to object or using the static method syntax of ActLike.
             Also if you want to change the behavior for slightly for specific types as this will take precident when using the dynamic keyword or your specific type is known staticly.
             </summary>
            <param name="otherInterfaces"></param>
            <typeparam name="TInterface"></typeparam>
            <returns></returns>
        </member>
        <member name="F:ImpromptuInterface.Dynamic.ImpromptuObject._returnTypHash">
            <summary>
            Cache to avoid refelection for same Interfaces.
            </summary>
        </member>
        <member name="F:ImpromptuInterface.Dynamic.ImpromptuObject._hash">
            <summary>
            Hash for this instance to lookup cached values from <see cref="F:ImpromptuInterface.Dynamic.ImpromptuObject._returnTypHash"/>
            </summary>
        </member>
        <member name="F:ImpromptuInterface.Dynamic.ImpromptuObject.PropertySpec">
            <summary>
            Keep Track of Known Property Spec
            </summary>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.ImpromptuObject.GetDynamicMemberNames">
            <summary>
            Returns the enumeration of all dynamic member names.
            </summary>
            <returns>
            A sequence that contains dynamic member names.
            </returns>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.ImpromptuObject.TryTypeForName(System.String,System.Type@)">
            <summary>
            Tries to get the type for the property name from the interface.
            </summary>
            <param name="name">The name.</param>
            <param name="returnType">The return Type.</param>
            <returns></returns>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.ImpromptuObject.ActLike``1(System.Type[])">
            <summary>
            Allows ActLike to be called via dyanmic invocation
            </summary>
            <typeparam name="TInterface">The type of the interface.</typeparam>
            <param name="otherInterfaces">The other interfaces.</param>
            <returns></returns>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.ImpromptuObject.ActLike(System.Collections.Generic.IDictionary{System.String,System.Type})">
            <summary>
            Allows ActLike to be called via dyanmic invocation
            </summary>
            <param name="informalInterface">The informal interface.</param>
            <returns></returns>
        </member>
        <member name="P:ImpromptuInterface.Dynamic.ImpromptuObject.KnownInterfaces">
            <summary>
            Gets or sets the known interfaces.
            Set should only be called be the factory methood
            </summary>
            <value>The known interfaces.</value>
        </member>
        <member name="P:ImpromptuInterface.Dynamic.ImpromptuObject.KnownPropertySpec">
            <summary>
            Gets or sets the known fake interface (string method name to return type mapping).
            </summary>
            <value>The known fake interface.</value>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.ImpromptuFactory.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the default implementation for operations that get instance as defined by <see cref="M:ImpromptuInterface.Dynamic.ImpromptuFactory.GetInstanceForDynamicMember(System.String)"/>. Classes derived from the <see cref="T:ImpromptuInterface.ImpromptuObject"/> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result"/>.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.ImpromptuFactory.CreateType(System.Type)">
            <summary>
            Constructs the type. Override for changing type intialization property changes.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.ImpromptuFactory.GetInstanceForDynamicMember(System.String)">
            <summary>
            Gets the instance for a dynamic member. Override for type constrcution behavoir changes based on property name.
            </summary>
            <param name="memberName">Name of the member.</param>
            <returns></returns>
        </member>
        <member name="T:ImpromptuInterface.Dynamic.ImpromptuSingleInstancesFactory">
            <summary>
            Base Class for making a singleton fluent factory using an Impromptu Interface return type.
            </summary>
        </member>
        <member name="F:ImpromptuInterface.Dynamic.ImpromptuSingleInstancesFactory._hashFactoryTypes">
            <summary>
            Store Singletons
            </summary>
        </member>
        <member name="F:ImpromptuInterface.Dynamic.ImpromptuSingleInstancesFactory._lockTable">
            <summary>
            Lock for accessing singletons
            </summary>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.ImpromptuSingleInstancesFactory.GetInstanceForDynamicMember(System.String)">
            <summary>
            Gets the instance for a dynamic member. Override for type constrcution behavoir changes based on property name.
            </summary>
            <param name="memberName">Name of the member.</param>
            <returns></returns>
        </member>
        <member name="T:ImpromptuInterface.Impromptu">
            <summary>
            Main API
            </summary>
        </member>
        <member name="M:ImpromptuInterface.Impromptu.CreateCallSite(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.String,System.Type)">
             <summary>
             Creates a cached call site at runtime. 
             </summary>
             <param name="delegateType">Type of the delegate.</param>
             <param name="binder">The CallSite binder.</param>
            <param name="name">Member Name</param>
            <param name="context"> Permissions Context type</param>
             <returns>The CallSite</returns>
             <remarks>
              Advanced usage only for serious custom dynamic invocation.
             </remarks>  
             <seealso cref="M:ImpromptuInterface.Impromptu.CreateCallSite``1(System.Runtime.CompilerServices.CallSiteBinder,System.String,System.Type)"/>
        </member>
        <member name="M:ImpromptuInterface.Impromptu.CreateCallSite``1(System.Runtime.CompilerServices.CallSiteBinder,System.String,System.Type)">
             <summary>
             Creates a cached call site at runtime.
             </summary>
             <typeparam name="T">Delegate Type</typeparam>
             <param name="binder">The binder.</param>
            <param name="name">Member Name</param>
            <param name="context"> Permissions Context type</param>
            <returns>The CallSite</returns>
             <remarks>
              Advanced usage only for serious custom dynamic invocation.
             </remarks>
             <example>
             Unit test that exhibits usage
            <code><![CDATA[
             
                string tResult = String.Empty;
                var tPoco = new MethOutPoco();
                var tBinder =
                    Binder.InvokeMember(BinderFlags.None, "Func", null, GetType(),
                                                new[]
                                                    {
                                                        Info.Create(
                                                            InfoFlags.None, null),
                                                        Info.Create(
                                                            InfoFlags.IsOut |
                                                            InfoFlags.UseCompileTimeType, null)
                                                    });
            
                var tSite = Impromptu.CreateCallSite<DynamicTryString>(tBinder);
             
                tSite.Target.Invoke(tSite, tPoco, out tResult);
            
                Assert.AreEqual("success", tResult);
              ]]></code>
             </example>
             <seealso cref="M:ImpromptuInterface.Impromptu.CreateCallSite(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.String,System.Type)"/>
        </member>
        <member name="M:ImpromptuInterface.Impromptu.InvokeMember(System.Object,System.String,System.Object[])">
             <summary>
             Dynamically Invokes a member method using the DLR
             </summary>
             <param name="target">The target.</param>
             <param name="name">The name.</param>
             <param name="args">The args.</param>
             <returns> The result</returns>
             <example>   
             Unit test that exhibits usage:
             <code>
             <![CDATA[
                dynamic tExpando = new ExpandoObject();
                tExpando.Func = new Func<int, string>(it => it.ToString());
            
                var tValue = 1;
                var tOut = Impromptu.InvokeMember(tExpando, "Func", tValue);
            
                Assert.AreEqual(tValue.ToString(), tOut);
             ]]>
             </code>
             </example>
        </member>
        <member name="M:ImpromptuInterface.Impromptu.InvokeMemberAction(System.Object,System.String,System.Object[])">
             <summary>
             Dynamically Invokes a member method which returns void using the DLR
             </summary>
             <param name="target">The target.</param>
             <param name="name">The name.</param>
             <param name="args">The args.</param>
             <example>
             Unit test that exhibits usage:
             <code>
             <![CDATA[
                var tTest = "Wrong";
                var tValue = "Correct";
            
                dynamic tExpando = new ExpandoObject();
                tExpando.Action = new Action<string>(it => tTest = it);
            
                Impromptu.InvokeMemberAction(tExpando, "Action", tValue);
            
                Assert.AreEqual(tValue, tTest);
             ]]>
             </code>
             </example>
        </member>
        <member name="M:ImpromptuInterface.Impromptu.InvokeSet(System.Object,System.String,System.Object)">
             <summary>
             Dynamically Invokes a set member using the DLR.
             </summary>
             <param name="target">The target.</param>
             <param name="name">The name.</param>
             <param name="value">The value.</param>
             <example>
             Unit test that exhibits usage:
             <code>
             <![CDATA[
                dynamic tExpando = new ExpandoObject();
            
                var tSetValue = "1";
            
                Impromptu.InvokeSet(tExpando, "Test", tSetValue);
            
                Assert.AreEqual(tSetValue, tExpando.Test);
             ]]>
             </code>
             </example>
        </member>
        <member name="M:ImpromptuInterface.Impromptu.InvokeGet(System.Object,System.String)">
             <summary>
             Dynamically Invokes a get member using the DLR.
             </summary>
             <param name="target">The target.</param>
             <param name="name">The name.</param>
             <returns>The result.</returns>
             <example>
             Unit Test that describes usage
             <code>
             <![CDATA[
                var tSetValue = "1";
                var tAnon = new { Test = tSetValue };
            
                var tOut =Impromptu.InvokeGet(tAnon, "Test");
            
                Assert.AreEqual(tSetValue, tOut);
             ]]>
             </code>
             </example>
        </member>
        <member name="M:ImpromptuInterface.Impromptu.FastDynamicInvoke(System.Delegate,System.Object[])">
            <summary>
            FastDynamicInvoke extension method. Runs up to runs up to 20x faster than <see cref="M:System.Delegate.DynamicInvoke(System.Object[])"/> .
            </summary>
            <param name="del">The del.</param>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:ImpromptuInterface.Impromptu.GenericDelegateType(System.Int32,System.Boolean)">
            <summary>
            Given a generic parameter count and whether it returns void or not gives type of Action or Func
            </summary>
            <param name="paramCount">The param count.</param>
            <param name="returnVoid">if set to <c>true</c> [return void].</param>
            <returns>Type of Action or Func</returns>
        </member>
        <member name="M:ImpromptuInterface.Impromptu.Invoke(System.Runtime.CompilerServices.CallSite,System.Object,System.Object[])">
            <summary>
            Dynamically invokes a method determined by the CallSite binder and be given an appropriate delegate type
            </summary>
            <param name="callSite">The Callsite</param>
            <param name="target">The target.</param>
            <param name="args">The args.</param>
            <returns></returns>
            <remarks>
            Advanced use only. Use this method for serious custom invocation, otherwise there are other convenience methods such as
            <see cref="M:ImpromptuInterface.Impromptu.InvokeMember(System.Object,System.String,System.Object[])"></see>, <see cref="M:ImpromptuInterface.Impromptu.InvokeGet(System.Object,System.String)"></see>, <see cref="M:ImpromptuInterface.Impromptu.InvokeSet(System.Object,System.String,System.Object)"></see> and <see cref="M:ImpromptuInterface.Impromptu.InvokeMemberAction(System.Object,System.String,System.Object[])"></see>
            </remarks>
        </member>
        <member name="M:ImpromptuInterface.Impromptu.ActLike``1(System.Object,System.Type[])">
            <summary>
            Extension Method that Wraps an existing object with an Explicit interface definition
            </summary>
            <typeparam name="TInterface">The type of the interface.</typeparam>
            <param name="originalDynamic">The original object can be annoymous type, System.DynamicObject as well as any others.</param>
            <param name="otherInterfaces">Optional other interfaces.</param>
            <returns></returns>
        </member>
        <member name="M:ImpromptuInterface.Impromptu.ActLikeProperties(System.Object,System.Collections.Generic.IDictionary{System.String,System.Type})">
            <summary>
            Makes static methods for the passed in property spec, designed to be used with old api's that reflect properties.
            </summary>
            <param name="originalDynamic">The original dynamic.</param>
            <param name="propertySpec">The property spec.</param>
            <returns></returns>
        </member>
        <member name="M:ImpromptuInterface.Impromptu.InitializeProxy(System.Type,System.Object,System.Collections.Generic.IEnumerable{System.Type},System.Collections.Generic.IDictionary{System.String,System.Type})">
            <summary>
            Private helper method that initializes the proxy.
            </summary>
            <param name="proxytype">The proxytype.</param>
            <param name="original">The original.</param>
            <param name="interfaces">The interfaces.</param>
            <param name="propertySpec">The property spec.</param>
            <returns></returns>
        </member>
        <member name="M:ImpromptuInterface.Impromptu.CallActLike``1(System.Object,System.Object,System.Type[])">
            <summary>
            This Extension method is called off the calling context to perserve permissions with the object wrapped with an explicit interface definition.
            </summary>
            <typeparam name="TInterface">The type of the interface.</typeparam>
            <param name="caller">The caller.</param>
            <param name="originalDynamic">The original dynamic.</param>
            <param name="otherInterfaces">The other interfaces.</param>
            <returns></returns>
            <example>
            UnitTest That describes usage
            <code>
            <![CDATA[
                var tTest = new TestWithPrivateMethod();
                var tNonExposed = this.CallActLike<IExposePrivateMethod>(tTest);
                Assert.Throws<RuntimeBinderException>(() => tNonExposed.Test());
            ]]>
            </code>
            </example>
        </member>
        <member name="M:ImpromptuInterface.Impromptu.AllActLike``1(System.Collections.Generic.IEnumerable{System.Object},System.Type[])">
            <summary>
            Chainable Linq to Objects Method, allows you to wrap a list of objects with an Explict interface defintion
            </summary>
            <typeparam name="TInterface">The type of the interface.</typeparam>
            <param name="originalDynamic">The original dynamic.</param>
            <param name="otherInterfaces">The other interfaces.</param>
            <returns></returns>
        </member>
        <member name="M:ImpromptuInterface.Impromptu.DynamicActLike(System.Object,System.Type[])">
            <summary>
            Static Method that wraps an existing dyanmic object with a explicit interface type
            </summary>
            <param name="originalDynamic">The original dynamic.</param>
            <param name="otherInterfaces">The other interfaces.</param>
            <returns></returns>
        </member>
        <member name="M:ImpromptuInterface.Impromptu.CallDynamicActLike(System.Object,System.Object,System.Type[])">
            <summary>
            This Extension method is called off the calling context to perserve permissions with the object wrapped with an explicit interface definition.
            </summary>
            <param name="caller">The caller.</param>
            <param name="originalDynamic">The original dynamic.</param>
            <param name="otherInterfaces">The other interfaces.</param>
            <returns></returns>
        </member>
        <member name="M:ImpromptuInterface.Impromptu.AllCallActLike``1(System.Collections.Generic.IEnumerable{System.Object},System.Object,System.Type[])">
            <summary>
            Chainable Linq to Objects Method, allows you to wrap a list of objects, and preserve method permissions with a caller, with an Explict interface defintion
            </summary>
            <typeparam name="TInterface">The type of the interface.</typeparam>
            <param name="originalDynamic">The original dynamic.</param>
            <param name="caller">The caller.</param>
            <param name="otherInterfaces">The other interfaces.</param>
            <returns></returns>
        </member>
        <member name="T:ImpromptuInterface.Dynamic.ImpromptuGet">
            <summary>
            Dynamic Proxy that exposes any (and only) getter properties of wrapped objects including Anonymous objects
            </summary>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.ImpromptuGet.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ImpromptuInterface.Dynamic.ImpromptuGet"/> class.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.ImpromptuGet.Create``1(System.Object)">
            <summary>
            Creates the proxy over the specified target.
            </summary>
            <typeparam name="T">Interface</typeparam>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.ImpromptuGet.Create(System.Object)">
            <summary>
            Creates the proxy over the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.ImpromptuGet.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result"/>.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.ImpromptuGet.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that invoke a member. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as calling a method.
            </summary>
            <param name="binder">Provides information about the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the statement sampleObject.SampleMethod(100), where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleMethod". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="args">The arguments that are passed to the object member during the invoke operation. For example, for the statement sampleObject.SampleMethod(100), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, <paramref name="args"/> is equal to 100.</param>
            <param name="result">The result of the member invocation.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
        </member>
        <member name="P:ImpromptuInterface.Dynamic.ImpromptuGet.Target">
            <summary>
            Gets or sets the target.
            </summary>
            <value>The target.</value>
        </member>
        <member name="T:ImpromptuInterface.Build.BuildProxy">
            <summary>
             Does most of the work buiding and caching proxies
            </summary>
        </member>
        <member name="M:ImpromptuInterface.Build.BuildProxy.WriteOutDll(System.String)">
            <summary>
            Writes the out DLL of types created between this call and being closed used for debugging of emitted IL code
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
            <remarks>
                This may be used for generating an assembly for preloading proxies, however you must be very careful when doing so as 
                changes could make the emitted asssembly out of date very easily.
            </remarks>
        </member>
        <member name="M:ImpromptuInterface.Build.BuildProxy.BuildType(System.Type,System.Type,System.Type[])">
            <summary>
            Builds the type for the static proxy or returns from cache
            </summary>
            <param name="contextType">Type of the context.</param>
            <param name="mainInterface">The main interface.</param>
            <param name="otherInterfaces">The other interfaces.</param>
            <returns></returns>
        </member>
        <member name="M:ImpromptuInterface.Build.BuildProxy.BuildType(System.Type,System.Collections.Generic.IDictionary{System.String,System.Type})">
            <summary>
            Builds the type.
            </summary>
            <param name="contextType">Type of the context.</param>
            <param name="informalInterface">The informal interface.</param>
            <returns></returns>
        </member>
        <member name="M:ImpromptuInterface.Build.BuildProxy.PreLoadProxy(System.Type,ImpromptuInterface.Build.ActLikeProxyAttribute)">
            <summary>
            Preloads a proxy for ActLike to use.
            </summary>
            <param name="proxyType">Type of the proxy.</param>
            <param name="attribute">The ActLikeProxyAttribute, if not provide it will be looked up.</param>
            <returns>Returns false if there already is a proxy registered for the same type.</returns>
        </member>
        <member name="M:ImpromptuInterface.Build.BuildProxy.PreLoadProxiesFromAssembly(System.Reflection.Assembly)">
            <summary>
            Preloads proxies that ActLike uses from assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>Returns false if there already is a proxy registered for the same type.</returns>
        </member>
        <member name="M:ImpromptuInterface.Build.BuildProxy.GenerateCallSiteFuncType(System.Collections.Generic.IEnumerable{System.Type},System.Type,System.Reflection.MethodInfo,System.Reflection.Emit.TypeBuilder)">
            <summary>
            Generates the delegate type of the call site function.
            </summary>
            <param name="argTypes">The arg types.</param>
            <param name="returnType">Type of the return.</param>
            <param name="methodInfo">The method info. Required for reference types or delegates with more than 16 arguments.</param>
            <param name="builder">The Type Builder. Required for reference types or delegates with more than 16 arguments.</param>
            <returns></returns>
        </member>
        <member name="P:ImpromptuInterface.Build.BuildProxy.Builder">
            <summary>
             Module Builder for buiding proxies
            </summary>
        </member>
        <member name="T:ImpromptuInterface.Build.TypeHash">
            <summary>
            Type that Encompasses Hashing a group of Types in various ways
            </summary>
        </member>
        <member name="M:ImpromptuInterface.Build.TypeHash.Equals(ImpromptuInterface.Build.TypeHash)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:ImpromptuInterface.Build.TypeHash.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ImpromptuInterface.Build.TypeHash.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:ImpromptuInterface.Build.TypeHash.op_Equality(ImpromptuInterface.Build.TypeHash,ImpromptuInterface.Build.TypeHash)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:ImpromptuInterface.Build.TypeHash.op_Inequality(ImpromptuInterface.Build.TypeHash,ImpromptuInterface.Build.TypeHash)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="F:ImpromptuInterface.Build.TypeHash.Types">
            <summary>
            Types to be hashed
            </summary>
        </member>
        <member name="F:ImpromptuInterface.Build.TypeHash.InformalInterface">
            <summary>
            The Informal Interface to be hashed
            </summary>
        </member>
        <member name="M:ImpromptuInterface.Build.TypeHash.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:ImpromptuInterface.Build.TypeHash"/> class.
            </summary>
            <param name="moreTypes">The more types.</param>
        </member>
        <member name="M:ImpromptuInterface.Build.TypeHash.#ctor(System.Type,System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:ImpromptuInterface.Build.TypeHash"/> class.
            For use when you have must distinguish one type; and the rest aren't strict
            </summary>
            <param name="type1">The type1.</param>
            <param name="moreTypes">The more types.</param>
        </member>
        <member name="M:ImpromptuInterface.Build.TypeHash.#ctor(System.Type,System.Collections.Generic.IDictionary{System.String,System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:ImpromptuInterface.Build.TypeHash"/> class.
            </summary>
            <param name="type1">The type1.</param>
            <param name="informalInterface">The informal interface.</param>
        </member>
        <member name="M:ImpromptuInterface.Build.TypeHash.#ctor(System.Boolean,System.Reflection.MemberInfo[])">
            <summary>
            Initializes a new instance of the <see cref="T:ImpromptuInterface.Build.TypeHash"/> class.
            </summary>
            <param name="strictOrder">if set to <c>true</c> [strict order].</param>
            <param name="moreTypes">types.</param>
        </member>
        <member name="M:ImpromptuInterface.Build.TypeHash.Create(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Creates the TypeHash
            </summary>
            <param name="moreTypes">The more types.</param>
            <returns></returns>
        </member>
        <member name="M:ImpromptuInterface.Build.TypeHash.Create(System.Type,System.Type[])">
            <summary>
            Creates the TypeHash
            </summary>
            <param name="type1">The type1.</param>
            <param name="moreTypes">The more types.</param>
            <returns></returns>
        </member>
        <member name="M:ImpromptuInterface.Build.TypeHash.Create(System.Type,System.Collections.Generic.IDictionary{System.String,System.Type})">
            <summary>
            Creates the TypeHash
            </summary>
            <param name="type1">The type1.</param>
            <param name="informalInterface">The informal interface.</param>
            <returns></returns>
        </member>
        <member name="M:ImpromptuInterface.Build.TypeHash.Create(System.Boolean,System.Reflection.MemberInfo[])">
            <summary>
            Creates the TypeHash
            </summary>
            <param name="strictOrder">if set to <c>true</c> [strict order].</param>
            <param name="moreTypes">The more types.</param>
            <returns></returns>
        </member>
        <member name="T:ImpromptuInterface.Build.EmitExtensions">
            <summary>
             Extension Methods that make emiting code easier and easier to read
            </summary>
        </member>
        <member name="M:ImpromptuInterface.Build.EmitExtensions.GetFieldEvenIfGeneric(System.Type,System.String)">
            <summary>
            Gets the field info even if generic type parameter.
            </summary>
            <param name="type">The type.</param>
            <param name="fieldName">Name of the field.</param>
            <returns></returns>
        </member>
        <member name="M:ImpromptuInterface.Build.EmitExtensions.GetMethodEvenIfGeneric(System.Type,System.String,System.Type[])">
            <summary>
            Gets the method info even if generic type parameter.
            </summary>
            <param name="type">The type.</param>
            <param name="methodName">Name of the method.</param>
            <param name="argTypes">The arg types.</param>
            <returns></returns>
        </member>
        <member name="M:ImpromptuInterface.Build.EmitExtensions.GetMethodEvenIfGeneric(System.Type,System.String)">
            <summary>
            Gets the method info even if generic type parameter.
            </summary>
            <param name="type">The type.</param>
            <param name="methodName">Name of the method.</param>
            <returns></returns>
        </member>
        <member name="M:ImpromptuInterface.Build.EmitExtensions.EmitBranchTrue(System.Reflection.Emit.ILGenerator)">
            <summary>
            Emits branch true. expects using keyword.
            </summary>
            <param name="generator">The generator.</param>
            <returns></returns>
            <example>
            Using keyword allows you to set the emit code you are branching over and then automatically emits label when disposing
            <code>
            <![CDATA[
                  tIlGen.Emit(OpCodes.Ldsfld, tConvertField);
                   using (tIlGen.EmitBranchTrue())
                  {
                       tIlGen.EmitDynamicConvertBinder(CSharpBinderFlags.None, returnType, contextType);
                       tIlGen.EmitCallsiteCreate(convertFuncType);
                       tIlGen.Emit(OpCodes.Stsfld, tConvertField);
                   }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:ImpromptuInterface.Build.EmitExtensions.EmitCallsiteCreate(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Emits creating the callsite.
            </summary>
            <param name="generator">The generator.</param>
            <param name="funcType">Type of the func.</param>
        </member>
        <member name="M:ImpromptuInterface.Build.EmitExtensions.EmitCallInvokeFunc(System.Reflection.Emit.ILGenerator,System.Type,System.Boolean)">
            <summary>
            Emits the call invoke delegate.
            </summary>
            <param name="generator">The generator.</param>
            <param name="funcType">Type of the func.</param>
            <param name="isAction">if set to <c>true</c> [is action].</param>
        </member>
        <member name="M:ImpromptuInterface.Build.EmitExtensions.EmitArray(System.Reflection.Emit.ILGenerator,System.Type,System.Collections.Generic.IList{System.Action{System.Reflection.Emit.ILGenerator}})">
            <summary>
            Emits an array.
            </summary>
            <param name="generator">The generator.</param>
            <param name="arrayType">Type of the array.</param>
            <param name="emitElements">The emit elements.</param>
        </member>
        <member name="M:ImpromptuInterface.Build.EmitExtensions.EmitStoreLocation(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            Emits the store location.
            </summary>
            <param name="generator">The generator.</param>
            <param name="location">The location.</param>
        </member>
        <member name="M:ImpromptuInterface.Build.EmitExtensions.EmitLoadArgument(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            Emits the load argument.
            </summary>
            <param name="generator">The generator.</param>
            <param name="location">The location.</param>
        </member>
        <member name="M:ImpromptuInterface.Build.EmitExtensions.EmitLoadLocation(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            Emits the load location.
            </summary>
            <param name="generator">The generator.</param>
            <param name="location">The location.</param>
        </member>
        <member name="M:ImpromptuInterface.Build.EmitExtensions.EmitDynamicMethodInvokeBinder(System.Reflection.Emit.ILGenerator,Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.String,System.Type,System.Reflection.ParameterInfo[])">
            <summary>
            Emits the dynamic method invoke binder.
            </summary>
            <param name="generator">The generator.</param>
            <param name="flag">The binding flags.</param>
            <param name="name">The name.</param>
            <param name="context">The context.</param>
            <param name="argInfo">The arg info.</param>
        </member>
        <member name="M:ImpromptuInterface.Build.EmitExtensions.EmitDynamicSetBinder(System.Reflection.Emit.ILGenerator,Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.String,System.Type,System.Type[])">
            <summary>
            Emits the dynamic set binder.
            </summary>
            <param name="generator">The generator.</param>
            <param name="flag">The binding flags.</param>
            <param name="name">The name.</param>
            <param name="context">The context.</param>
            <param name="argTypes">The arg types.</param>
        </member>
        <member name="M:ImpromptuInterface.Build.EmitExtensions.EmitDynamicGetBinder(System.Reflection.Emit.ILGenerator,Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.String,System.Type,System.Type[])">
            <summary>
            Emits the dynamic get binder.
            </summary>
            <param name="generator">The generator.</param>
            <param name="flag">The binding flags.</param>
            <param name="name">The name.</param>
            <param name="context">The context.</param>
            <param name="argTypes">The arg types.</param>
        </member>
        <member name="M:ImpromptuInterface.Build.EmitExtensions.EmitCreateCSharpArgumentInfo(System.Reflection.Emit.ILGenerator,Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags,System.String)">
            <summary>
            Emits creating the <see cref="T:Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo"></see>
            </summary>
            <param name="generator">The generator.</param>
            <param name="flag">The flag.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:ImpromptuInterface.Build.EmitExtensions.EmitDynamicConvertBinder(System.Reflection.Emit.ILGenerator,Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Type)">
            <summary>
            Emits the dynamic convert binder.
            </summary>
            <param name="generator">The generator.</param>
            <param name="flag">The binding flag.</param>
            <param name="returnType">Type of the return.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:ImpromptuInterface.Build.EmitExtensions.EmitTypeOf(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Emits the typeof(Type)
            </summary>
            <param name="generator">The generator.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:ImpromptuInterface.Build.EmitExtensions.EmitTypeOf(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.TypeToken)">
            <summary>
            Emits the typeof(Type)
            </summary>
            <param name="generator">The generator.</param>
            <param name="type">The type.</param>
        </member>
        <member name="T:ImpromptuInterface.Build.EmitExtensions.BranchTrueOverBlock">
            <summary>
             Used to automatically create label on dispose
            </summary>
        </member>
        <member name="M:ImpromptuInterface.Build.EmitExtensions.BranchTrueOverBlock.#ctor(System.Reflection.Emit.ILGenerator)">
            <summary>
             Constructor
            </summary>
            <param name="generator"></param>
        </member>
        <member name="M:ImpromptuInterface.Build.EmitExtensions.BranchTrueOverBlock.Dispose">
            <summary>
            Finishes block
            </summary>
        </member>
        <member name="T:ImpromptuInterface.Dynamic.Return`1">
            <summary>
            Fluent Class for writing inline lambdass
            </summary>
            <typeparam name="TR">The type of the R.</typeparam>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.Return`1.Arguments(System.Func{`0})">
            <summary>
            Arguments 
            </summary>
            <param name="del">The lambdas.</param>
            <returns></returns>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.Return`1.Arguments``1(System.Func{``0,`0})">
            <summary>
            Arguments
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <param name="del">The lambda.</param>
            <returns>The lambda.</returns>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.Return`1.Arguments``2(System.Func{``0,``1,`0})">
            <summary>
            Arguments
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <param name="del">The lambda.</param>
            <returns>The lambda.</returns>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.Return`1.Arguments``3(System.Func{``0,``1,``2,`0})">
            <summary>
            Arguments
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <param name="del">The lambda.</param>
            <returns>The lambda.</returns>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.Return`1.Arguments``4(System.Func{``0,``1,``2,``3,`0})">
            <summary>
            Arguments
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <param name="del">The lambda.</param>
            <returns>The lambda.</returns>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.Return`1.Arguments``5(System.Func{``0,``1,``2,``3,``4,`0})">
            <summary>
            Arguments
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="T5">The type of the 5.</typeparam>
            <param name="del">The lambda.</param>
            <returns>The lambda.</returns>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.Return`1.Arguments``6(System.Func{``0,``1,``2,``3,``4,``5,`0})">
            <summary>
            Arguments
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="T5">The type of the 5.</typeparam>
            <typeparam name="T6">The type of the 6.</typeparam>
            <param name="del">The lambda.</param>
            <returns>The lambda.</returns>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.Return`1.Arguments``7(System.Func{``0,``1,``2,``3,``4,``5,``6,`0})">
            <summary>
            Arguments
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="T5">The type of the 5.</typeparam>
            <typeparam name="T6">The type of the 6.</typeparam>
            <typeparam name="T7">The type of the 7.</typeparam>
            <param name="del">The lambda.</param>
            <returns>The lambda.</returns>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.Return`1.Arguments``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,`0})">
            <summary>
            Arguments
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="T5">The type of the 5.</typeparam>
            <typeparam name="T6">The type of the 6.</typeparam>
            <typeparam name="T7">The type of the 7.</typeparam>
            <typeparam name="T8">The type of the 8.</typeparam>
            <param name="del">The lambda.</param>
            <returns>The lambda.</returns>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.Return`1.Arguments``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,`0})">
            <summary>
            Arguments
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="T5">The type of the 5.</typeparam>
            <typeparam name="T6">The type of the 6.</typeparam>
            <typeparam name="T7">The type of the 7.</typeparam>
            <typeparam name="T8">The type of the 8.</typeparam>
            <typeparam name="T9">The type of the 9.</typeparam>
            <param name="del">The lambda.</param>
            <returns>The lambda.</returns>
        </member>
        <member name="T:ImpromptuInterface.Dynamic.ReturnVoid">
            <summary>
            Fluent class for writing inline lambdas that return void
            </summary>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.ReturnVoid.Arguments(System.Action)">
            <summary>
            Arguments
            </summary>
            <param name="del">The lambda.</param>
            <returns>The lambda.</returns>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.ReturnVoid.Arguments``1(System.Action{``0})">
            <summary>
            Arguments
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <param name="del">The lambda.</param>
            <returns>The lambda.</returns>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.ReturnVoid.Arguments``2(System.Action{``0,``1})">
            <summary>
            Arguments
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <param name="del">The lambda.</param>
            <returns>The lambda.</returns>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.ReturnVoid.Arguments``3(System.Action{``0,``1,``2})">
            <summary>
            Arguments
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <param name="del">The lambda.</param>
            <returns>The lambda.</returns>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.ReturnVoid.Arguments``4(System.Action{``0,``1,``2,``3})">
            <summary>
            Arguments
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <param name="del">The lambda.</param>
            <returns>The lambda.</returns>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.ReturnVoid.Arguments``5(System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Arguments
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="T5">The type of the 5.</typeparam>
            <param name="del">The lambda.</param>
            <returns>The lambda.</returns>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.ReturnVoid.Arguments``6(System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Arguments
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="T5">The type of the 5.</typeparam>
            <typeparam name="T6">The type of the 6.</typeparam>
            <param name="del">The lambda.</param>
            <returns>The lambda.</returns>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.ReturnVoid.Arguments``7(System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Arguments
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="T5">The type of the 5.</typeparam>
            <typeparam name="T6">The type of the 6.</typeparam>
            <typeparam name="T7">The type of the 7.</typeparam>
            <param name="del">The lambda.</param>
            <returns>The lambda.</returns>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.ReturnVoid.Arguments``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Arguments
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="T5">The type of the 5.</typeparam>
            <typeparam name="T6">The type of the 6.</typeparam>
            <typeparam name="T7">The type of the 7.</typeparam>
            <typeparam name="T8">The type of the 8.</typeparam>
            <param name="del">The lambda.</param>
            <returns>The lambda.</returns>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.ReturnVoid.Arguments``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Arguments
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="T5">The type of the 5.</typeparam>
            <typeparam name="T6">The type of the 6.</typeparam>
            <typeparam name="T7">The type of the 7.</typeparam>
            <typeparam name="T8">The type of the 8.</typeparam>
            <typeparam name="T9">The type of the 9.</typeparam>
            <param name="del">The lambda.</param>
            <returns>The lambda.</returns>
        </member>
        <member name="T:ImpromptuInterface.Dynamic.ImpromptuDictionary">
            <summary>
            Similar to Expando Objects but handles null values when the property is defined with an impromptu interface
            </summary>
        </member>
        <member name="F:ImpromptuInterface.Dynamic.ImpromptuDictionary._dictionary">
            <summary>
            Wrapped Dictionary
            </summary>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.ImpromptuDictionary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImpromptuInterface.Dynamic.ImpromptuDictionary"/> class.
            </summary>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.ImpromptuDictionary.Create``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Convenience create method to make an Impromptu Dictionary instance acting like interface type parameter
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dict">The dict.</param>
            <returns></returns>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.ImpromptuDictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Initializes a new instance of the <see cref="T:ImpromptuInterface.Dynamic.ImpromptuDictionary"/> class.
            </summary>
            <param name="dict">The dict.</param>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.ImpromptuDictionary.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result"/>.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.ImpromptuDictionary.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that invoke a member. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as calling a method.
            </summary>
            <param name="binder">Provides information about the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the statement sampleObject.SampleMethod(100), where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleMethod". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="args">The arguments that are passed to the object member during the invoke operation. For example, for the statement sampleObject.SampleMethod(100), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, <paramref name="args"/> is equal to 100.</param>
            <param name="result">The result of the member invocation.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.ImpromptuDictionary.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Provides the implementation for operations that set member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as setting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member to which the value is being assigned. For example, for the statement sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="value">The value to set to the member. For example, for sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, the <paramref name="value"/> is "Test".</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.ImpromptuDictionary.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.ImpromptuDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.ImpromptuDictionary.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.ImpromptuDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Determines whether [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
            	<c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.ImpromptuDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.ImpromptuDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.ImpromptuDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether the specified key contains key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.ImpromptuDictionary.Add(System.String,System.Object)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.ImpromptuDictionary.Remove(System.String)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.ImpromptuDictionary.TryGetValue(System.String,System.Object@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.ImpromptuDictionary.OnPropertyChanged(System.String)">
            <summary>
            Called when [property changed].
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.ImpromptuDictionary.Equals(ImpromptuInterface.Dynamic.ImpromptuDictionary)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.ImpromptuDictionary.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.ImpromptuDictionary.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:ImpromptuInterface.Dynamic.ImpromptuDictionary.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:ImpromptuInterface.Dynamic.ImpromptuDictionary.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:ImpromptuInterface.Dynamic.ImpromptuDictionary.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
            	<c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ImpromptuInterface.Dynamic.ImpromptuDictionary.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:ImpromptuInterface.Dynamic.ImpromptuDictionary.Keys">
            <summary>
            Gets the keys.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="P:ImpromptuInterface.Dynamic.ImpromptuDictionary.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="E:ImpromptuInterface.Dynamic.ImpromptuDictionary.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:ImpromptuInterface.ImpromptuObject">
            <summary>
            Obsolete Use <see cref="T:ImpromptuInterface.Dynamic.ImpromptuObject"/>instead
            </summary>
        </member>
        <member name="T:ImpromptuInterface.ImpromptuFactory">
            <summary>
            Use <see cref="T:ImpromptuInterface.Dynamic.ImpromptuFactory"/> instead.
            </summary>
        </member>
        <member name="T:ImpromptuInterface.ImpromptuSingleInstancesFactory">
            <summary>
            Use <see cref="T:ImpromptuInterface.Dynamic.ImpromptuFactory"/> instead.
            </summary>
        </member>
    </members>
</doc>
